<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 渲染 | My Octopress Blog]]></title>
  <link href="http://danerduo87.github.io/blog/categories/xuan-ran/atom.xml" rel="self"/>
  <link href="http://danerduo87.github.io/"/>
  <updated>2016-07-09T21:31:06+08:00</updated>
  <id>http://danerduo87.github.io/</id>
  <author>
    <name><![CDATA[Wangsihao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shadow Map杂记]]></title>
    <link href="http://danerduo87.github.io/blog/2016/07/09/ShadowMap%E6%9D%82%E8%AE%B0/"/>
    <updated>2016-07-09T18:10:14+08:00</updated>
    <id>http://danerduo87.github.io/blog/2016/07/09/ShadowMap杂记</id>
    <content type="html"><![CDATA[<h3>阴影由不透明物体接受光照形成，无法被光线照射到的部分产生阴影</h3>

<p>shadow map 是目前实现实时阴影效果和效率较好的方式，针对每一个光源，都必须单独生成对应的shadow map</p>

<ol>
<li><p>将摄像机置于光源的位置，并朝向光源的朝向（方向光使用正交投影，spot light使用透视投影），关闭颜色等输出，渲染整个场景并输出depth信息到shadow map（render texture）中</p></li>
<li><p>渲染场景，在fragment shader中，将每一个像素的pos转换到光源的投影空间中（使用步骤1中world, view, proj的逆矩阵计算），采样shadow map中对应的depth值，如果该像素pos的z 大于shadow map中的对应值，说明该像素无法被光源"看到",既该像素在阴影中，该像素的颜色将与阴影色产生一个混合后输出（基于阴影的强度）</p></li>
</ol>


<h4>shadow map 的缺陷 ：</h4>

<ol>
<li><p>阴影缺失或阴影混乱 ：在执行步骤1时的灯光投影视锥体aspect与视口设置不匹配，导致shadow map走样。在执行步骤1时的灯光投影视锥小于实际场景相机的视锥，导致场景中的像素在shadow map中找不到对应的值，既shadow map中不包含场景中的点。</p>

<p> <strong>解决方案 ：</strong>
     选择匹配的设置，选择合理的视锥设置等。</p></li>
<li><p>Shadow Acne 阴影瑕疵 ：具体表现为本该被照亮的地方却显示为随机的阴影条纹。原因是在像素在光源空间的z刚好和shadow map中的值一样时，因为精度的问题，被误判为在阴影中</p>

<p> <strong>解决方案 ：</strong></p>

<pre><code> 1. 添加一个bias偏移（正是unity使用的方法），只有当 pos.z - bias &gt; texture2d(shadowmap)时，才认为其在阴影中，该方法可以极大的减少shadow acne（一个经验公式 ： 使用 1.0f/(d*d - 2d)作为bias，d代表光源到顶点的距离）

 2. 在步骤1时将裁减模式设为正面(相当于通过模型本身的厚度来施加偏移 bias)

 3. 在步骤1生成shadow map时，按照物体的normal方向施加一个 normal bisa偏移，unity综合使用了该方法

 bias设置得过大，会导致另一种缺陷，阴影悬空（Peter Panning），既阴影看起来脱离了物体，就好像物体是悬空的情况，需选择一个合适的值
</code></pre></li>
<li><p>shadow map走样， 可以通过sampler2DShadow函数来采样，这是一个硬件支持的采样函数，会混合周围的像素值</p></li>
<li><p>shadow map 精度缺失 ： shadow map应用于整个场景，实际情况是，场景相机的视锥中，靠近near平面的较小区域会占据屏幕上的大部分像素，而靠近far平面的较广阔的区域在屏幕上只会占据较小的像素，在步骤1中生成shadow map时无论场景多大，shaow map的分辨率是固定的，于是随着shadow map管辖的场景区域的增大，near平面的map精度将随之降低，于是近景的阴影就会产生严重的锯齿</p>

<p> <strong>解决方案：</strong></p>

<pre><code> 1. Cascaded Shadow Map(CSM)， 级联shadow map,也是unity中采样的方案。原理是通过数学方法（具体可以看相关论文），合理的将视锥区域划分为几个子区域，
 2. 每个区域单独生成shadow map，对于near平面附近的区域，生成高分辨率的shadow map以产生精细的阴影，对于far 平面附近的区域，可以使用低分辨率的shadow map。
</code></pre>

<p> <strong>该方法 需要解决几个问题 ：</strong></p>

<pre><code> 1. 如何生成紧密的light投影视锥，使得该光源视锥尽可能只包含该子区域的场景（通常是判断包围盒或包围球）
 2. 由于z buffer对于精度极其敏感，所以尽可能的使得光源视锥的远近平面选择足够优化，以使得shadow map中的有效z信息有足够的精度
 3. 相邻的cascade区域的光源视锥极可能覆盖的场景中的相同物体，导致物体被重复计算
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
